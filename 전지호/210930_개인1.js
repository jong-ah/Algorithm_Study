//! 문제 설명
/*
    길이가 같은 배열 A, B 두개가 있습니다. 각 배열은 자연수로 이루어져 있습니다.
    배열 A, B에서 각각 한 개의 숫자를 뽑아 두 수를 곱합니다.
    이러한 과정을 배열의 길이만큼 반복하며, 두 수를 곱한 값을 누적하여 더합니다. 
    이때 최종적으로 누적된 값이 최소가 되도록 만드는 것이 목표입니다.
    (단, 각 배열에서 k번째 숫자를 뽑았다면 다음에 k번째 숫자는 다시 뽑을 수 없습니다.)

    예를 들어 A = [1, 4, 2] , B = [5, 4, 4] 라면
    ?1. A에서 첫번째 숫자인 1, B에서 첫번째 숫자인 5를 뽑아 곱하여 더합니다. (누적된 값 : 0 + 5(1x5) = 5)
    ?2. A에서 두번째 숫자인 4, B에서 세번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 5 + 16(4x4) = 21)
    ?3. A에서 세번째 숫자인 2, B에서 두번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 21 + 8(2x4) = 29)

    즉, 이 경우가 최소가 되므로 29를 return 합니다.
    배열 A, B가 주어질 때 최종적으로 누적된 최솟값을 return 하는 solution 함수를 완성해 주세요.
*/

//! 제한 사항
//? 1. 배열 A, B의 크기 : 1,000 이하의 자연수
//? 2. 배열 A, B의 원소의 크기 : 1,000 이하의 자연수

function solution(A, B) {
  //? 1. 문제이해
  /*
    이번에도 수학적인 개념이 약간은 들어간 문제였다.
    배열에 주어진 인덱스들끼리 곱하면서 값을 누적해가다가 가장 적은 수를 return 해야하는 문제이다.
    한 쪽의 가장 작은값과 한 쪽의 가장 큰값끼리 곱해주면서 값을 더해주면 되는 문제이다.
  */

  //? 2. 시간복잡도
  //* for 문 한 번 도는게 끝이므로 O(n) 의 시간복잡도를 가진다.

  //? 3. 개선점
  //* 다른 사람 풀이 코드를 보았을때 reduce 를 사용한 사람도 있었지만, 돌아가는 방식은 같아서 딱히 개선할점이 없음
  let result = 0;

  A.sort((a, b) => {
    return a - b;
  });

  B.sort((a, b) => {
    return b - a;
  });

  for (let i = 0; i < A.length; i++) {
    result += A[i] * B[i];
  }

  return result;
}

//! 입출력 예시
console.log(solution([1, 4, 2], [5, 4, 4])); //* 결과: 29
console.log(solution([1, 2], [3, 4])); //* 결과: 10
