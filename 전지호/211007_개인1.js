//! 문제 설명
/*
    두 수의 최소공배수(Least Common Multiple)란 입력된 두 수의 배수 중 공통이 되는 가장 작은 숫자를 의미합니다.
    예를 들어 2와 7의 최소공배수는 14가 됩니다.
    정의를 확장해서, n개의 수의 최소공배수는 n 개의 수들의 배수 중 공통이 되는 가장 작은 숫자가 됩니다.
    n개의 숫자를 담은 배열 arr이 입력되었을 때 이 수들의 최소공배수를 반환하는 함수, solution을 완성해 주세요.
*/

//! 제한 사항
//? 1. arr은 길이 1이상, 15이하인 배열입니다.
//? 2. arr의 원소는 100 이하인 자연수입니다.

function gcd(a, b) {
  while (b > 0) {
    let temp = b;
    b = a % b;
    a = temp;
  }

  return a;
}

function lcm(a, b) {
  return (a * b) / gcd(a, b);
}

function solution(arr) {
  //? 1. 문제 이해
  /*
    먼저 유클리드 호제법의 개념을 알고 있어야한다.
    최소공배수를 구하는 방법은 최소공배수 = 두 수의 곱 / 최대공약수 가 된다.
    먼저 최대공약수와 최소공배수를 구해주는 함수를 따로 만들어주었다.
    result 를 1 을 준 이유는 0 을 곱하면 모두 0 이 나와버리기 때문이다.
    N 개의 최소공배수를 구하는 방법은 먼저 두 수의 최소공배수를 구하고 나온 최소공배수와 다음 숫자의 최소공배수를 구하면된다.
  */

  //? 2. 시간복잡도
  //* for 문 안에서 while 문이 한 번 돌아간다 O(n * n) 의 시간복잡도를 가지게 된다.

  //? 3. 개선점
  //* 만약 코드의 길이를 줄인다면 for 문 대신에 reduce 를 사용하여 줄일 수 있는 것을 확인했다.
  //* 대부분의 사람들이 재귀를 이용하여 많이 풀었다. 시간복잡도는 결과가 같아 보여 개선점은 딱히 없어 보인다.

  let result = 1;

  for (let i = 0; i < arr.length; i++) {
    result = lcm(result, arr[i]);
  }

  return result;
}

//! 입출력 예시
console.log(solution([2, 6, 8, 14])); //* 결과: 168
console.log(solution([1, 2, 3])); //* 결과: 6
