//! 문제 설명
/*
    땅따먹기 게임을 하려고 합니다. 
    땅따먹기 게임의 땅(land)은 총 N행 4열로 이루어져 있고, 모든 칸에는 점수가 쓰여 있습니다. 
    1행부터 땅을 밟으며 한 행씩 내려올 때, 각 행의 4칸 중 한 칸만 밟으면서 내려와야 합니다. 
    단, 땅따먹기 게임에는 한 행씩 내려올 때, 같은 열을 연속해서 밟을 수 없는 특수 규칙이 있습니다.

    예를 들면,

    | 1 | 2 | 3 | 5 |
    | 5 | 6 | 7 | 8 |
    | 4 | 3 | 2 | 1 |

    로 땅이 주어졌다면, 1행에서 네번째 칸 (5)를 밟았으면, 2행의 네번째 칸 (8)은 밟을 수 없습니다.

    마지막 행까지 모두 내려왔을 때, 얻을 수 있는 점수의 최대값을 return하는 solution 함수를 완성해 주세요. 
    위 예의 경우, 1행의 네번째 칸 (5), 2행의 세번째 칸 (7), 3행의 첫번째 칸 (4) 땅을 밟아 
    16점이 최고점이 되므로 16을 return 하면 됩니다.
*/

//! 제한 사항
//? 1. 행의 개수 N : 100,000 이하의 자연수
//? 2. 열의 개수는 4개이고, 땅(land)은 2차원 배열로 주어집니다.
//? 3. 점수 : 100 이하의 자연수

function solution(land) {
  //? 1. 문제이해
  /*
    처음에는 2중 반복문을 사용해서 문제를 풀었는데.. 효율성 테스트에서 통과하지 못했고,
    DP 를 사용해서 풀어야한다는것을 질문하기에서 확인했다.
    자신의 열을 제외한 인덱스의 값은 사용이 가능하고 그 중에서 최댓값을 가져오면 되는 간단한 문제였다.
  */

  //? 2. 시간복잡도
  //* for 문 하나로 사용하고 그 안에서 Math.max 만을 사용해서 O(N * NlogN) 으로 계산이 된다.

  //? 3. 개선점
  //* 단순 DP 문제였고, 효율성 테스트도 모두 통과하였으며 다른 사람의 풀이도 전부 똑같이 풀었다..
  //* 그래서 딱히 개선점은 없어 보인다.
  let arr = [];

  for (let i = 1; i < land.length; i++) {
    land[i][0] += Math.max(land[i - 1][1], land[i - 1][2], land[i - 1][3]);
    land[i][1] += Math.max(land[i - 1][0], land[i - 1][2], land[i - 1][3]);
    land[i][2] += Math.max(land[i - 1][0], land[i - 1][1], land[i - 1][3]);
    land[i][3] += Math.max(land[i - 1][0], land[i - 1][1], land[i - 1][2]);
  }

  arr = land[land.length - 1];

  return Math.max(...arr);
}

//! 입출력 예시
console.log(
  solution([
    [1, 2, 3, 5],
    [5, 6, 7, 8],
    [4, 3, 2, 1],
  ])
); //* 결과: 16
