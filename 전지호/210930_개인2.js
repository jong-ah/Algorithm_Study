//! 문제 설명
/*
    1와 0로 채워진 표(board)가 있습니다. 표 1칸은 1 x 1 의 정사각형으로 이루어져 있습니다.
    표에서 1로 이루어진 가장 큰 정사각형을 찾아 넓이를 return 하는 solution 함수를 완성해 주세요.
    (단, 정사각형이란 축에 평행한 정사각형을 말합니다.)
*/

//! 제한 사항
//? 1. 표(board)는 2차원 배열로 주어집니다.
//? 2. 표(board)의 행(row)의 크기 : 1,000 이하의 자연수
//? 3. 표(board)의 열(column)의 크기 : 1,000 이하의 자연수
//? 4. 표(board)의 값은 1또는 0으로만 이루어져 있습니다.

function solution(board) {
  //? 1. 문제 이해
  /*
    2차원 배열 안에서 인덱스가 1로 이루어진 사각형의 넓이를 구하는 것이다.
    단, 정사각형을 구하는 것이었다.
    2중 for 문을 사용하여 현재 위치한 인덱스의 요소가 값이 1이라면 왼쪽, 왼쪽상단, 상단 이렇게 3 곳의 위치의 값을
    확인한다.
    그 중에서 가장 작은 값을 min 에 넣어주었다.
    만약 0 이 1개라도 존재한다면 정사각형이 되지 않는다.
    최종적으로 마지막까지 탐색하면서 값을 누적하며 더해가다 보면 사각형의 한 변의 길이가 나온다.
  */

  //? 2. 시간복잡도
  //*  2 중 for 문을 사용하고 내부에서 Math.min 을 사용해 주고 있으므로 O(n ^ 2 * nlogn) 이 될 것이다.

  //? 3. 개선점
  //* 다른 사람의 풀이를 찾아봤는데 문제 자체가 2중 반복을 사용하여 탐색을 해야하므로 최선의 코드는 없었다.
  //* 개선할점은 없어 보인다.
  let result = 0;

  if (board.length < 2 || board[0].length < 2) {
    return 1;
  }

  for (let i = 1; i < board.length; i++) {
    for (let j = 1; j < board[i].length; j++) {
      if (board[i][j] > 0) {
        let min = Math.min(
          board[i - 1][j - 1],
          board[i][j - 1],
          board[i - 1][j]
        );
        board[i][j] = min + 1;
      }
      if (result < board[i][j]) {
        result = board[i][j];
      }
    }
  }

  return result * result;
}

//! 입출력 예시
console.log(
  solution([
    [0, 1, 1, 1],
    [1, 1, 1, 1],
    [1, 1, 1, 1],
    [0, 0, 1, 0],
  ])
); //* 결과: 9

console.log(
  solution([
    [0, 0, 1, 1],
    [1, 1, 1, 1],
  ])
); //* 결과: 4
